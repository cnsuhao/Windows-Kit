<?xml version="1.0" encoding="utf-8" ?>
<CodeSnippets  xmlns="http://schemas.microsoft.com/VisualStudio/2005/CodeSnippet">
	<CodeSnippet Format="1.0.0">
		<Header>
			<Title>iterindex</Title>
			<Shortcut>iterindex</Shortcut>
			<Description>Code snippet for 'named' iterator/indexer pair using a nested class</Description>
			<Author>Microsoft Corporation</Author>
			<SnippetTypes>
				<SnippetType>Expansion</SnippetType>
			</SnippetTypes>
		</Header>
		<Snippet>
			<Declarations>
				<Literal>
					<ID>type</ID>
					<Default>ElementType</Default>
					<ToolTip>Type to return from iterator/indexer</ToolTip>
				</Literal>
				<Literal>
					<ID>name</ID>
					<Default>MyView</Default>
					<ToolTip>Name of the iterator/indexer pair</ToolTip>
				</Literal>
				<Literal Editable="false">
					<ID>outer</ID>
					<Default>OuterClass</Default>
					<Function>ClassName()</Function>
				</Literal>
				<Literal Editable="false">
					<ID>SystemCollectionsGenericIEnumeratorG</ID>
					<Default>System.Collections.Generic.IEnumerator</Default>
				</Literal>
				<Literal Editable="false">
					<ID>NotImplementedException</ID>
					<Function>SimpleTypeName(global::System.NotImplementedException)</Function>
				</Literal>
			</Declarations>
			<Code Language="csharp">
    <![CDATA[/// <summary>
        /// Gets an iterator for this instance of the <see cref="T:$outer$"/> class.
        /// </summary>
        /// <value>An iterator for this instance of the <see cref="T:$outer$"/> class.</value>
        public $name$Iterator $name$
        {
            get
            {
                return new $name$Iterator(this);
            }
        }

        /// <summary>
        /// Provides an iterator for the <see cref="T:$outer$"/> class.
        /// </summary>
        public class $name$Iterator
        {
            /// <summary>
            /// The instance of the <see cref="T:$outer$"/> class for which an iterator is required.
            /// </summary>
            private readonly $outer$ outer;

            /// <summary>
            /// Initializes a new instance of the <see cref="T:$name$Iterator"/> class.
            /// </summary>
            /// <param name="outer">The instance of the <see cref="T:$outer$"/> class for which an iterator is required.</param>
            internal $name$Iterator($outer$ outer)
            {
                this.outer = outer;
            }

            /// <summary>
            /// Gets the length.
            /// </summary>
            /// <value>The length</value>
            public int Length 
            { 
                get 
                { 
                    // TODO: write your implementation of Length here
                    throw new $NotImplementedException$(); 
                } 
            }

            /// <summary>
            /// Gets the <see cref="T:$type$"/> at the specified index.
            /// </summary>
            /// <param name="index">The zero-based index of the element to get or set.</param>
            /// <value>The <see cref="T:$type$"/> at the specified index.</value>
            public $type$ this[int index]
            {
                get
                {
                    // TODO: write your implementation of the indexer here.
                    // you have full access to $outer$ privates
                    $end$throw new $NotImplementedException$();
                    return default($type$);
                }
            }

            /// <summary>
            /// Returns an enumerator that iterates through the collection.
            /// </summary>
            /// <returns>An enumerator that iterates through the collection.</returns>
            public $SystemCollectionsGenericIEnumeratorG$<$type$> GetEnumerator()
            {
                for (int i = 0; i < this.Length; i++)
                {				 
                    yield return this[i];
                }
            }
        }]]>
			</Code>
		</Snippet>
	</CodeSnippet>
</CodeSnippets>