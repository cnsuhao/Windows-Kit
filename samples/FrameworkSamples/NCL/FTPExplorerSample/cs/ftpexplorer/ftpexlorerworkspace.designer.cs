//------------------------------------------------------------------------------
// <autogenerated>
//     This code was generated by a tool.
//     Runtime Version:2.0.41104.0
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </autogenerated>
//------------------------------------------------------------------------------

namespace Microsoft.Samples.FTPExplorer {
    using System;
    
    
    [Serializable()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.ComponentModel.ToolboxItem(true)]
    [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedDataSetSchema")]
    [System.Xml.Serialization.XmlRootAttribute("FtpExlorerWorkspace")]
    public partial class FtpExlorerWorkspace : System.Data.DataSet {
        
        private SiteListDataTable tableSiteList;
        
        public FtpExlorerWorkspace() {
            this.BeginInit();
            this.InitClass();
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            base.Relations.CollectionChanged += schemaChangedHandler;
            this.EndInit();
        }
        
        protected FtpExlorerWorkspace(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                base(info, context) {
            if ((this.IsBinarySerialized(info, context) == true)) {
                this.InitVars(false);
                System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler1 = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
                this.Tables.CollectionChanged += schemaChangedHandler1;
                this.Relations.CollectionChanged += schemaChangedHandler1;
                return;
            }
            string strSchema = ((string)(info.GetValue("XmlSchema", typeof(string))));
            if ((strSchema != null)) {
                System.Data.DataSet ds = new System.Data.DataSet();
                ds.ReadXmlSchema(new System.Xml.XmlTextReader(new System.IO.StringReader(strSchema)));
                if ((ds.Tables["SiteList"] != null)) {
                    base.Tables.Add(new SiteListDataTable(ds.Tables["SiteList"]));
                }
                this.DataSetName = ds.DataSetName;
                this.Prefix = ds.Prefix;
                this.Namespace = ds.Namespace;
                this.Locale = ds.Locale;
                this.CaseSensitive = ds.CaseSensitive;
                this.EnforceConstraints = ds.EnforceConstraints;
                this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
                this.InitVars();
            }
            else {
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            this.GetSerializationData(info, context);
            System.ComponentModel.CollectionChangeEventHandler schemaChangedHandler = new System.ComponentModel.CollectionChangeEventHandler(this.SchemaChanged);
            base.Tables.CollectionChanged += schemaChangedHandler;
            this.Relations.CollectionChanged += schemaChangedHandler;
        }
        
        [System.ComponentModel.Browsable(false)]
        [System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)]
        public SiteListDataTable SiteList {
            get {
                return this.tableSiteList;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataTableCollection Tables {
            get {
                return base.Tables;
            }
        }
        
        [System.ComponentModel.DesignerSerializationVisibilityAttribute(System.ComponentModel.DesignerSerializationVisibility.Hidden)]
        public new System.Data.DataRelationCollection Relations {
            get {
                return base.Relations;
            }
        }
        
        [System.ComponentModel.DefaultValueAttribute(false)]
        public new bool EnforceConstraints {
            get {
                return base.EnforceConstraints;
            }
            set {
                base.EnforceConstraints = value;
            }
        }
        
        public override System.Data.DataSet Clone() {
            FtpExlorerWorkspace cln = ((FtpExlorerWorkspace)(base.Clone()));
            cln.InitVars();
            return cln;
        }
        
        protected override bool ShouldSerializeTables() {
            return false;
        }
        
        protected override bool ShouldSerializeRelations() {
            return false;
        }
        
        protected override void ReadXmlSerializable(System.Xml.XmlReader reader) {
            this.Reset();
            System.Data.DataSet ds = new System.Data.DataSet();
            ds.ReadXml(reader);
            if ((ds.Tables["SiteList"] != null)) {
                base.Tables.Add(new SiteListDataTable(ds.Tables["SiteList"]));
            }
            this.DataSetName = ds.DataSetName;
            this.Prefix = ds.Prefix;
            this.Namespace = ds.Namespace;
            this.Locale = ds.Locale;
            this.CaseSensitive = ds.CaseSensitive;
            this.EnforceConstraints = ds.EnforceConstraints;
            this.Merge(ds, false, System.Data.MissingSchemaAction.Add);
            this.InitVars();
        }
        
        protected override System.Xml.Schema.XmlSchema GetSchemaSerializable() {
            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            this.WriteXmlSchema(new System.Xml.XmlTextWriter(stream, null));
            stream.Position = 0;
            return System.Xml.Schema.XmlSchema.Read(new System.Xml.XmlTextReader(stream), null);
        }
        
        internal void InitVars() {
            this.InitVars(true);
        }
        
        internal void InitVars(bool initTable) {
            this.tableSiteList = ((SiteListDataTable)(base.Tables["SiteList"]));
            if ((initTable == true)) {
                if ((this.tableSiteList != null)) {
                    this.tableSiteList.InitVars();
                }
            }
        }
        
        private void InitClass() {
            this.DataSetName = "FtpExlorerWorkspace";
            this.Prefix = "";
            this.Namespace = "http://tempuri.org/FtpExlorerWorkspace.xsd";
            this.Locale = new System.Globalization.CultureInfo("en-US");
            this.CaseSensitive = false;
            this.EnforceConstraints = false;
            this.tableSiteList = new SiteListDataTable();
            base.Tables.Add(this.tableSiteList);
        }
        
        private bool ShouldSerializeSiteList() {
            return false;
        }
        
        private void SchemaChanged(object sender, System.ComponentModel.CollectionChangeEventArgs e) {
            if ((e.Action == System.ComponentModel.CollectionChangeAction.Remove)) {
                this.InitVars();
            }
        }
        
        public static System.Xml.Schema.XmlSchemaComplexType GetTypedDataSetSchema(System.Xml.Schema.XmlSchemaSet xs) {
            FtpExlorerWorkspace ds = new FtpExlorerWorkspace();
            System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
            System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
            xs.Add(ds.GetSchemaSerializable());
            System.Xml.Schema.XmlSchemaAny any = new System.Xml.Schema.XmlSchemaAny();
            any.Namespace = ds.Namespace;
            sequence.Items.Add(any);
            type.Particle = sequence;
            return type;
        }
        
        public delegate void SiteListRowChangeEventHandler(object sender, SiteListRowChangeEvent e);
        
        [System.Serializable()]
        [System.Xml.Serialization.XmlSchemaProviderAttribute("GetTypedTableSchema")]
        public partial class SiteListDataTable : System.Data.DataTable, System.Collections.IEnumerable {
            
            private System.Data.DataColumn columnHostName;
            
            private System.Data.DataColumn columnUserId;
            
            private System.Data.DataColumn columnPassword;
            
            private System.Data.DataColumn columnIsSecured;
            
            public SiteListDataTable() {
                this.TableName = "SiteList";
                this.BeginInit();
                this.InitClass();
                this.EndInit();
            }
            
            internal SiteListDataTable(System.Data.DataTable table) {
                this.TableName = table.TableName;
                if ((table.CaseSensitive != table.DataSet.CaseSensitive)) {
                    this.CaseSensitive = table.CaseSensitive;
                }
                if ((table.Locale.ToString() != table.DataSet.Locale.ToString())) {
                    this.Locale = table.Locale;
                }
                if ((table.Namespace != table.DataSet.Namespace)) {
                    this.Namespace = table.Namespace;
                }
                this.Prefix = table.Prefix;
                this.MinimumCapacity = table.MinimumCapacity;
            }
            
            protected SiteListDataTable(System.Runtime.Serialization.SerializationInfo info, System.Runtime.Serialization.StreamingContext context) : 
                    base(info, context) {
                this.InitVars();
            }
            
            public System.Data.DataColumn HostNameColumn {
                get {
                    return this.columnHostName;
                }
            }
            
            public System.Data.DataColumn UserIdColumn {
                get {
                    return this.columnUserId;
                }
            }
            
            public System.Data.DataColumn PasswordColumn {
                get {
                    return this.columnPassword;
                }
            }
            
            public System.Data.DataColumn IsSecuredColumn {
                get {
                    return this.columnIsSecured;
                }
            }
            
            [System.ComponentModel.Browsable(false)]
            public int Count {
                get {
                    return this.Rows.Count;
                }
            }
            
            public SiteListRow this[int index] {
                get {
                    return ((SiteListRow)(this.Rows[index]));
                }
            }
            
            public event SiteListRowChangeEventHandler SiteListRowChanged;
            
            public event SiteListRowChangeEventHandler SiteListRowChanging;
            
            public event SiteListRowChangeEventHandler SiteListRowDeleted;
            
            public event SiteListRowChangeEventHandler SiteListRowDeleting;
            
            public void AddSiteListRow(SiteListRow row) {
                this.Rows.Add(row);
            }
            
            public SiteListRow AddSiteListRow(string HostName, string UserId, string Password, bool IsSecured) {
                SiteListRow rowSiteListRow = ((SiteListRow)(this.NewRow()));
                rowSiteListRow.ItemArray = new object[] {
                        HostName,
                        UserId,
                        Password,
                        IsSecured};
                this.Rows.Add(rowSiteListRow);
                return rowSiteListRow;
            }
            
            public System.Collections.IEnumerator GetEnumerator() {
                return this.Rows.GetEnumerator();
            }
            
            public override System.Data.DataTable Clone() {
                SiteListDataTable cln = ((SiteListDataTable)(base.Clone()));
                cln.InitVars();
                return cln;
            }
            
            protected override System.Data.DataTable CreateInstance() {
                return new SiteListDataTable();
            }
            
            internal void InitVars() {
                this.columnHostName = base.Columns["HostName"];
                this.columnUserId = base.Columns["UserId"];
                this.columnPassword = base.Columns["Password"];
                this.columnIsSecured = base.Columns["IsSecured"];
            }
            
            private void InitClass() {
                this.columnHostName = new System.Data.DataColumn("HostName", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnHostName);
                this.columnUserId = new System.Data.DataColumn("UserId", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnUserId);
                this.columnPassword = new System.Data.DataColumn("Password", typeof(string), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnPassword);
                this.columnIsSecured = new System.Data.DataColumn("IsSecured", typeof(bool), null, System.Data.MappingType.Element);
                base.Columns.Add(this.columnIsSecured);
                this.columnUserId.DefaultValue = ((string)("Anonymous"));
                this.columnPassword.DefaultValue = ((string)(""));
                this.columnIsSecured.DefaultValue = ((bool)(false));
                this.Locale = new System.Globalization.CultureInfo("en-US");
            }
            
            public SiteListRow NewSiteListRow() {
                return ((SiteListRow)(this.NewRow()));
            }
            
            protected override System.Data.DataRow NewRowFromBuilder(System.Data.DataRowBuilder builder) {
                return new SiteListRow(builder);
            }
            
            protected override System.Type GetRowType() {
                return typeof(SiteListRow);
            }
            
            protected override void OnRowChanged(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanged(e);
                if ((this.SiteListRowChanged != null)) {
                    this.SiteListRowChanged(this, new SiteListRowChangeEvent(((SiteListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowChanging(System.Data.DataRowChangeEventArgs e) {
                base.OnRowChanging(e);
                if ((this.SiteListRowChanging != null)) {
                    this.SiteListRowChanging(this, new SiteListRowChangeEvent(((SiteListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleted(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleted(e);
                if ((this.SiteListRowDeleted != null)) {
                    this.SiteListRowDeleted(this, new SiteListRowChangeEvent(((SiteListRow)(e.Row)), e.Action));
                }
            }
            
            protected override void OnRowDeleting(System.Data.DataRowChangeEventArgs e) {
                base.OnRowDeleting(e);
                if ((this.SiteListRowDeleting != null)) {
                    this.SiteListRowDeleting(this, new SiteListRowChangeEvent(((SiteListRow)(e.Row)), e.Action));
                }
            }
            
            public void RemoveSiteListRow(SiteListRow row) {
                this.Rows.Remove(row);
            }
            
            public static System.Xml.Schema.XmlSchemaComplexType GetTypedTableSchema(System.Xml.Schema.XmlSchemaSet xs) {
                System.Xml.Schema.XmlSchemaComplexType type = new System.Xml.Schema.XmlSchemaComplexType();
                System.Xml.Schema.XmlSchemaSequence sequence = new System.Xml.Schema.XmlSchemaSequence();
                FtpExlorerWorkspace ds = new FtpExlorerWorkspace();
                xs.Add(ds.GetSchemaSerializable());
                System.Xml.Schema.XmlSchemaAny any1 = new System.Xml.Schema.XmlSchemaAny();
                any1.Namespace = "http://www.w3.org/2001/XMLSchema";
                any1.MinOccurs = new decimal(0);
                any1.MaxOccurs = decimal.MaxValue;
                any1.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any1);
                System.Xml.Schema.XmlSchemaAny any2 = new System.Xml.Schema.XmlSchemaAny();
                any2.Namespace = "urn:schemas-microsoft-com:xml-diffgram-v1";
                any2.MinOccurs = new decimal(1);
                any2.ProcessContents = System.Xml.Schema.XmlSchemaContentProcessing.Lax;
                sequence.Items.Add(any2);
                System.Xml.Schema.XmlSchemaAttribute attribute1 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute1.Name = "namespace";
                attribute1.FixedValue = ds.Namespace;
                type.Attributes.Add(attribute1);
                System.Xml.Schema.XmlSchemaAttribute attribute2 = new System.Xml.Schema.XmlSchemaAttribute();
                attribute2.Name = "tableTypeName";
                attribute2.FixedValue = "SiteListDataTable";
                type.Attributes.Add(attribute2);
                type.Particle = sequence;
                return type;
            }
        }
        
        public partial class SiteListRow : System.Data.DataRow {
            
            private SiteListDataTable tableSiteList;
            
            internal SiteListRow(System.Data.DataRowBuilder rb) : 
                    base(rb) {
                this.tableSiteList = ((SiteListDataTable)(this.Table));
            }
            
            public string HostName {
                get {
                    try {
                        return ((string)(this[this.tableSiteList.HostNameColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column HostName", e);
                    }
                }
                set {
                    this[this.tableSiteList.HostNameColumn] = value;
                }
            }
            
            public string UserId {
                get {
                    try {
                        return ((string)(this[this.tableSiteList.UserIdColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column UserId", e);
                    }
                }
                set {
                    this[this.tableSiteList.UserIdColumn] = value;
                }
            }
            
            public string Password {
                get {
                    try {
                        return ((string)(this[this.tableSiteList.PasswordColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column Password", e);
                    }
                }
                set {
                    this[this.tableSiteList.PasswordColumn] = value;
                }
            }
            
            public bool IsSecured {
                get {
                    try {
                        return ((bool)(this[this.tableSiteList.IsSecuredColumn]));
                    }
                    catch (System.InvalidCastException e) {
                        throw new System.Data.StrongTypingException("StrongTyping_CannotAccessDBNull for column IsSecured", e);
                    }
                }
                set {
                    this[this.tableSiteList.IsSecuredColumn] = value;
                }
            }
            
            public bool IsHostNameNull() {
                return this.IsNull(this.tableSiteList.HostNameColumn);
            }
            
            public void SetHostNameNull() {
                this[this.tableSiteList.HostNameColumn] = System.Convert.DBNull;
            }
            
            public bool IsUserIdNull() {
                return this.IsNull(this.tableSiteList.UserIdColumn);
            }
            
            public void SetUserIdNull() {
                this[this.tableSiteList.UserIdColumn] = System.Convert.DBNull;
            }
            
            public bool IsPasswordNull() {
                return this.IsNull(this.tableSiteList.PasswordColumn);
            }
            
            public void SetPasswordNull() {
                this[this.tableSiteList.PasswordColumn] = System.Convert.DBNull;
            }
            
            public bool IsIsSecuredNull() {
                return this.IsNull(this.tableSiteList.IsSecuredColumn);
            }
            
            public void SetIsSecuredNull() {
                this[this.tableSiteList.IsSecuredColumn] = System.Convert.DBNull;
            }
        }
        
        public class SiteListRowChangeEvent : System.EventArgs {
            
            private SiteListRow eventRow;
            
            private System.Data.DataRowAction eventAction;
            
            public SiteListRowChangeEvent(SiteListRow row, System.Data.DataRowAction action) {
                this.eventRow = row;
                this.eventAction = action;
            }
            
            public SiteListRow Row {
                get {
                    return this.eventRow;
                }
            }
            
            public System.Data.DataRowAction Action {
                get {
                    return this.eventAction;
                }
            }
        }
    }
}
